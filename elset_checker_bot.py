import requests
import pdfplumber
import io
import re
import os
import datetime
from urllib.parse import urljoin
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TARGET_CITIES, MESSAGE_SETTINGS, DEBUG, HISTORY_FILE


LOG_FILE = "bot_launches.log"

def log_launch():
    """–ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª"""
    try:
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{current_time}] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
        
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_message)
        
        print(f"–õ–æ–≥ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∞–Ω: {current_time}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=payload)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def is_pdf_processed(pdf_url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç PDF —Ñ–∞–π–ª"""
    if not os.path.exists(HISTORY_FILE):
        return False
    
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            processed_files = f.read().splitlines()
        return pdf_url in processed_files
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return False

def mark_pdf_processed(pdf_url):
    """–î–æ–±–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö"""
    try:
        with open(HISTORY_FILE, 'a', encoding='utf-8') as f:
            f.write(pdf_url + '\n')
        print(f"–§–∞–π–ª {pdf_url} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def format_outage_message(entry):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏"""
    city = entry.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    date_off = entry.get('date_off', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    time_off = entry.get('time_off', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    time_on = entry.get('time_on', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    streets = entry.get('streets', '–£–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    
    if MESSAGE_SETTINGS['use_emoji']:
        message = (
            f"{city}\n"
            f"<b>üìÖ –î–∞—Ç–∞:</b> {date_off}\n"
            f"<b>‚è∞ –í—Ä–µ–º—è:</b> {time_off}-{time_on}\n"
            f"\n"
            f"üèôÔ∏è {streets}"
        )
    else:
        message = (
            f"{city}\n"
            f"<b>–î–∞—Ç–∞:</b> {date_off}\n"
            f"<b>–í—Ä–µ–º—è:</b> {time_off}-{time_on}\n"
            f"\n"
            f"{streets}"
        )
    
    return message

def create_telegram_message(results, pdf_url, is_debug=False, is_duplicate=False):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
    if not results:
        return []

    separator = MESSAGE_SETTINGS['separator']
    
    if MESSAGE_SETTINGS['use_emoji']:
        header = f"‚ö° <b>–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏</b> ‚ö°\n"
        header += f"üèòÔ∏è <b>–ò—Å–∫–æ–º—ã–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:</b> {', '.join(TARGET_CITIES)}\n"
        header += f"üìä <b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> {len(results)}\n"
        header += f"üîó <a href='{pdf_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</a>\n"
        if is_duplicate:
            header += f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</b> (—Ñ–∞–π–ª —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω)\n"
        if is_debug:
            header += f"üîß <b>–û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú</b>\n"
        header += f"\n{separator}\n\n"
    else:
        header = f"<b>–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏</b>\n"
        header += f"<b>–ò—Å–∫–æ–º—ã–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:</b> {', '.join(TARGET_CITIES)}\n"
        header += f"<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> {len(results)}\n"
        header += f"<a href='{pdf_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</a>\n"
        if is_duplicate:
            header += f"<b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</b> (—Ñ–∞–π–ª —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω)\n"
        if is_debug:
            header += f"<b>–û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú</b>\n"
        header += f"\n{separator}\n\n"
    
    messages = []
    current_message = header
    
    for i, entry in enumerate(results, 1):
        entry_text = format_outage_message(entry)
        
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏)
        if i < len(results):
            entry_text += f"\n{separator}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(current_message + entry_text) > 4000:
            messages.append(current_message)
            current_message = entry_text
        else:
            current_message += entry_text
    
    if current_message:
        messages.append(current_message)
    
    return messages

def parse_pdf_content(pdf_content):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF –∏ –ø–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
    results = []
    
    with pdfplumber.open(io.BytesIO(pdf_content)) as pdf:
        for page in pdf.pages:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—É
            tables = page.extract_tables()
            
            for table in tables:
                if table:
                    for row in table:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if not row or not row[0] or not str(row[0]).strip().isdigit():
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
                        if len(row) > 1 and row[1]:
                            city_name = str(row[1]).strip()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ª—é–±–æ–π –∏–∑ –∏—Å–∫–æ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                            for target_city in TARGET_CITIES:
                                if target_city in city_name:
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤
                                    try:
                                        city = str(row[1]).strip() if row[1] else city_name
                                        streets = str(row[2]).strip() if row[2] and len(row) > 2 else "—É–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                                        date_off = str(row[3]).strip() if row[3] and len(row) > 3 else "–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                                        time_off = str(row[4]).strip() if row[4] and len(row) > 4 else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                                        time_on = str(row[6]).strip() if row[6] and len(row) > 6 else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                                        
                                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
                                        result = {
                                            'city': city,
                                            'date_off': date_off,
                                            'time_off': time_off,
                                            'time_on': time_on,
                                            'streets': streets
                                        }
                                        results.append(result)
                                        print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {city}, {date_off}, {time_off}-{time_on}, {streets}")
                                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                        
                                    except Exception as e:
                                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                                        continue
    
    return results

def process_pdf_file(pdf_url):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
    try:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF: {pdf_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
        is_duplicate = is_pdf_processed(pdf_url)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if is_duplicate and not DEBUG:
            print(f"–§–∞–π–ª {pdf_url} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return True
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ PDF
        pdf_response = requests.get(pdf_url, timeout=30)
        pdf_response.raise_for_status()

        # –ü–∞—Ä—Å–∏–Ω–≥ PDF
        results = parse_pdf_content(pdf_response.content)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        if results:
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = create_telegram_message(results, pdf_url, is_debug=DEBUG, is_duplicate=is_duplicate)
            
            for message in messages:
                send_telegram_message(message)
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –¥–ª—è —Ñ–∞–π–ª–∞ {pdf_url}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)
            if not is_duplicate:
                mark_pdf_processed(pdf_url)
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"–î–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ {TARGET_CITIES} –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ {pdf_url}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)
            if not is_duplicate:
                mark_pdf_processed(pdf_url)
                
        return True
        
    except requests.RequestException as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_url}: {str(e)}"
        print(error_msg)
        if DEBUG:
            send_telegram_message(error_msg + "\nüîß <b>–û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú</b>")
        return False
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pdf_url}: {str(e)}"
        print(error_msg)
        if DEBUG:
            send_telegram_message(error_msg + "\nüîß <b>–û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú</b>")
        return False

def main():
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
    log_launch()
    try:
        print("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        print(f"–ò—â–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤: {', '.join(TARGET_CITIES)}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        url = "https://elsetudm.ru/consumers/planovye-otklyucheniya-elektroenergii/"
        response = requests.get(url, timeout=30)
        response.raise_for_status()

        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö PDF —Å—Å—ã–ª–æ–∫ –≤ HTML
        pdf_links = re.findall(r'href="([^"]*\.pdf[^"]*)"', response.text, re.IGNORECASE)
        if not pdf_links:
            print("PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(pdf_links)} PDF —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π PDF —Ñ–∞–π–ª
        processed_count = 0
        for pdf_link in pdf_links:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
            if not pdf_link.startswith('http'):
                pdf_url = urljoin(url, pdf_link)
            else:
                pdf_url = pdf_link
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if process_pdf_file(pdf_url):
                processed_count += 1
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {len(pdf_links)} —Ñ–∞–π–ª–æ–≤")
        
        # –ï—Å–ª–∏ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
        if DEBUG and processed_count == 0 and len(pdf_links) > 0:
            print("–í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ (–æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º)")

    except requests.RequestException as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}"
        print(error_msg)
    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)

if __name__ == "__main__":
    main()